
Microwave_Grill_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800252c  0800252c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800252c  0800252c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800252c  0800252c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002540  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002540  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e05  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001494  00000000  00000000  00027e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  000292d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016508  00000000  00000000  0002a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000715d  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083a0a  00000000  00000000  00047bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb5e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000cb664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800249c 	.word	0x0800249c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800249c 	.word	0x0800249c

0800014c <keypad_scan>:
	'1', '2', '3', '-',
	'o', '0', '=', '+'*/

};
uint8_t keypad_scan()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//PORTC=0b11111111;
	/*GPIO_TypeDef *GPIOx;
	GPIOx = GPIOA;
	GPIOx->ODR = 0b1111;*/
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8000152:	2201      	movs	r2, #1
 8000154:	2101      	movs	r1, #1
 8000156:	4855      	ldr	r0, [pc, #340]	; (80002ac <keypad_scan+0x160>)
 8000158:	f001 f983 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2102      	movs	r1, #2
 8000160:	4852      	ldr	r0, [pc, #328]	; (80002ac <keypad_scan+0x160>)
 8000162:	f001 f97e 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	2104      	movs	r1, #4
 800016a:	4850      	ldr	r0, [pc, #320]	; (80002ac <keypad_scan+0x160>)
 800016c:	f001 f979 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	2108      	movs	r1, #8
 8000174:	484d      	ldr	r0, [pc, #308]	; (80002ac <keypad_scan+0x160>)
 8000176:	f001 f974 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800017a:	2201      	movs	r2, #1
 800017c:	2110      	movs	r1, #16
 800017e:	484b      	ldr	r0, [pc, #300]	; (80002ac <keypad_scan+0x160>)
 8000180:	f001 f96f 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	2120      	movs	r1, #32
 8000188:	4848      	ldr	r0, [pc, #288]	; (80002ac <keypad_scan+0x160>)
 800018a:	f001 f96a 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2140      	movs	r1, #64	; 0x40
 8000192:	4846      	ldr	r0, [pc, #280]	; (80002ac <keypad_scan+0x160>)
 8000194:	f001 f965 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	4843      	ldr	r0, [pc, #268]	; (80002ac <keypad_scan+0x160>)
 800019e:	f001 f960 	bl	8001462 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i=0;i<4;i++)
 80001a2:	2300      	movs	r3, #0
 80001a4:	71fb      	strb	r3, [r7, #7]
 80001a6:	e078      	b.n	800029a <keypad_scan+0x14e>
	{
		//CLRBIT(PORTC,i);
		HAL_Delay(1);
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 feb9 	bl	8000f20 <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA,i,GPIO_PIN_RESET);
		if(i==0)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d104      	bne.n	80001be <keypad_scan+0x72>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2101      	movs	r1, #1
 80001b8:	483c      	ldr	r0, [pc, #240]	; (80002ac <keypad_scan+0x160>)
 80001ba:	f001 f952 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==1)
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <keypad_scan+0x82>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2102      	movs	r1, #2
 80001c8:	4838      	ldr	r0, [pc, #224]	; (80002ac <keypad_scan+0x160>)
 80001ca:	f001 f94a 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==2)
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d104      	bne.n	80001de <keypad_scan+0x92>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	2104      	movs	r1, #4
 80001d8:	4834      	ldr	r0, [pc, #208]	; (80002ac <keypad_scan+0x160>)
 80001da:	f001 f942 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==3)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	d104      	bne.n	80001ee <keypad_scan+0xa2>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2108      	movs	r1, #8
 80001e8:	4830      	ldr	r0, [pc, #192]	; (80002ac <keypad_scan+0x160>)
 80001ea:	f001 f93a 	bl	8001462 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0) return keypad_matrix[0 + (i*4)];
 80001ee:	2110      	movs	r1, #16
 80001f0:	482e      	ldr	r0, [pc, #184]	; (80002ac <keypad_scan+0x160>)
 80001f2:	f001 f91f 	bl	8001434 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d104      	bne.n	8000206 <keypad_scan+0xba>
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <keypad_scan+0x164>)
 8000202:	5cd3      	ldrb	r3, [r2, r3]
 8000204:	e04d      	b.n	80002a2 <keypad_scan+0x156>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==0) return keypad_matrix[1 + (i*4)];
 8000206:	2120      	movs	r1, #32
 8000208:	4828      	ldr	r0, [pc, #160]	; (80002ac <keypad_scan+0x160>)
 800020a:	f001 f913 	bl	8001434 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d105      	bne.n	8000220 <keypad_scan+0xd4>
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	3301      	adds	r3, #1
 800021a:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <keypad_scan+0x164>)
 800021c:	5cd3      	ldrb	r3, [r2, r3]
 800021e:	e040      	b.n	80002a2 <keypad_scan+0x156>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)==0) return keypad_matrix[2 + (i*4)];
 8000220:	2140      	movs	r1, #64	; 0x40
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <keypad_scan+0x160>)
 8000224:	f001 f906 	bl	8001434 <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d105      	bne.n	800023a <keypad_scan+0xee>
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	3302      	adds	r3, #2
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <keypad_scan+0x164>)
 8000236:	5cd3      	ldrb	r3, [r2, r3]
 8000238:	e033      	b.n	80002a2 <keypad_scan+0x156>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)==0) return keypad_matrix[3 + (i*4)];
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	481b      	ldr	r0, [pc, #108]	; (80002ac <keypad_scan+0x160>)
 800023e:	f001 f8f9 	bl	8001434 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d105      	bne.n	8000254 <keypad_scan+0x108>
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	3303      	adds	r3, #3
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <keypad_scan+0x164>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	e026      	b.n	80002a2 <keypad_scan+0x156>
		/*if (READBIT(PINC,4) == 0) return keypad_matrix[0 + (i*4)];
		if (READBIT(PINC,5) == 0) return keypad_matrix[1 + (i*4)];
		if (READBIT(PINC,6) == 0) return keypad_matrix[2 + (i*4)];
		if (READBIT(PINC,7) == 0) return keypad_matrix[3 + (i*4)];*/
		//SETBIT(PORTC,i);
		if(i==0)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d104      	bne.n	8000264 <keypad_scan+0x118>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	4813      	ldr	r0, [pc, #76]	; (80002ac <keypad_scan+0x160>)
 8000260:	f001 f8ff 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==1)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d104      	bne.n	8000274 <keypad_scan+0x128>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	2102      	movs	r1, #2
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <keypad_scan+0x160>)
 8000270:	f001 f8f7 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==2)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d104      	bne.n	8000284 <keypad_scan+0x138>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2104      	movs	r1, #4
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <keypad_scan+0x160>)
 8000280:	f001 f8ef 	bl	8001462 <HAL_GPIO_WritePin>
		if(i==3)
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	2b03      	cmp	r3, #3
 8000288:	d104      	bne.n	8000294 <keypad_scan+0x148>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2108      	movs	r1, #8
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <keypad_scan+0x160>)
 8000290:	f001 f8e7 	bl	8001462 <HAL_GPIO_WritePin>
	for (i=0;i<4;i++)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	3301      	adds	r3, #1
 8000298:	71fb      	strb	r3, [r7, #7]
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b03      	cmp	r3, #3
 800029e:	d983      	bls.n	80001a8 <keypad_scan+0x5c>
		//HAL_GPIO_WritePin(GPIOA,i,GPIO_PIN_SET);
		//HAL_Delay(5);
	}
	return 0;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40010800 	.word	0x40010800
 80002b0:	0800250c 	.word	0x0800250c

080002b4 <lcd_init>:
void lcd_init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002be:	480d      	ldr	r0, [pc, #52]	; (80002f4 <lcd_init+0x40>)
 80002c0:	f001 f8cf 	bl	8001462 <HAL_GPIO_WritePin>

	//CLRBIT(PORTB, 2);	// RW = 0	write

	lcd_cmd(0X02);		// 4-bit mode
 80002c4:	2002      	movs	r0, #2
 80002c6:	f000 f817 	bl	80002f8 <lcd_cmd>
	lcd_cmd(0X28);		// 4-bit mode
 80002ca:	2028      	movs	r0, #40	; 0x28
 80002cc:	f000 f814 	bl	80002f8 <lcd_cmd>
	lcd_cmd(0X01);		// clear LCD
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 f811 	bl	80002f8 <lcd_cmd>
	lcd_cmd(0X0C);		// cursor : off
 80002d6:	200c      	movs	r0, #12
 80002d8:	f000 f80e 	bl	80002f8 <lcd_cmd>
	lcd_cmd(0X06);		// cursor increment : to right
 80002dc:	2006      	movs	r0, #6
 80002de:	f000 f80b 	bl	80002f8 <lcd_cmd>
	lcd_cmd(0X80);		// set cursor at the beginning of line1
 80002e2:	2080      	movs	r0, #128	; 0x80
 80002e4:	f000 f808 	bl	80002f8 <lcd_cmd>
	//_delay_ms(20);
	HAL_Delay(20);
 80002e8:	2014      	movs	r0, #20
 80002ea:	f000 fe19 	bl	8000f20 <HAL_Delay>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800

080002f8 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	//CLRBIT(PORTB, 1);		// RS = 0	command
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000308:	4831      	ldr	r0, [pc, #196]	; (80003d0 <lcd_cmd+0xd8>)
 800030a:	f001 f8aa 	bl	8001462 <HAL_GPIO_WritePin>
	//PORTA &= 0X0F;			// clear data-pins
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2110      	movs	r1, #16
 8000312:	4830      	ldr	r0, [pc, #192]	; (80003d4 <lcd_cmd+0xdc>)
 8000314:	f001 f8a5 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2120      	movs	r1, #32
 800031c:	482d      	ldr	r0, [pc, #180]	; (80003d4 <lcd_cmd+0xdc>)
 800031e:	f001 f8a0 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	482b      	ldr	r0, [pc, #172]	; (80003d4 <lcd_cmd+0xdc>)
 8000328:	f001 f89b 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	4828      	ldr	r0, [pc, #160]	; (80003d4 <lcd_cmd+0xdc>)
 8000332:	f001 f896 	bl	8001462 <HAL_GPIO_WritePin>
	//PORTA |= (cmd & 0XF0);	// write MSBs only
	GPIO_TypeDef *GPIOx;
	GPIOx = GPIOB;
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <lcd_cmd+0xdc>)
 8000338:	60fb      	str	r3, [r7, #12]
	GPIOx->ODR |= (cmd & 0XF0);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000344:	431a      	orrs	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	60da      	str	r2, [r3, #12]
	//GPIOx->BSRR |= (uint32_t)(cmd & 0XF0);
	// Enable
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000350:	481f      	ldr	r0, [pc, #124]	; (80003d0 <lcd_cmd+0xd8>)
 8000352:	f001 f886 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fde2 	bl	8000f20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <lcd_cmd+0xd8>)
 8000364:	f001 f87d 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000368:	2001      	movs	r0, #1
 800036a:	f000 fdd9 	bl	8000f20 <HAL_Delay>
	/*SETBIT(PORTB, 3);
	_delay_ms(1);
	CLRBIT(PORTB, 3);
	_delay_ms(1);*/
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2110      	movs	r1, #16
 8000372:	4818      	ldr	r0, [pc, #96]	; (80003d4 <lcd_cmd+0xdc>)
 8000374:	f001 f875 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2120      	movs	r1, #32
 800037c:	4815      	ldr	r0, [pc, #84]	; (80003d4 <lcd_cmd+0xdc>)
 800037e:	f001 f870 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4813      	ldr	r0, [pc, #76]	; (80003d4 <lcd_cmd+0xdc>)
 8000388:	f001 f86b 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4810      	ldr	r0, [pc, #64]	; (80003d4 <lcd_cmd+0xdc>)
 8000392:	f001 f866 	bl	8001462 <HAL_GPIO_WritePin>

	GPIOx->ODR |= (cmd << 4);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	79fa      	ldrb	r2, [r7, #7]
 800039c:	0112      	lsls	r2, r2, #4
 800039e:	431a      	orrs	r2, r3
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	60da      	str	r2, [r3, #12]
	//GPIOx->BSRR |= (uint32_t)(cmd << 4);
	//PORTA &= 0X0F;			// clear data-pins
	//PORTA |= (cmd << 4);	// write LSBs only
	// Enable
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <lcd_cmd+0xd8>)
 80003ac:	f001 f859 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 fdb5 	bl	8000f20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <lcd_cmd+0xd8>)
 80003be:	f001 f850 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fdac 	bl	8000f20 <HAL_Delay>
	/*SETBIT(PORTB, 3);
	_delay_ms(1);
	CLRBIT(PORTB, 3);
	_delay_ms(1);*/
}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <lcd_write_data>:

void lcd_write_data(uint8_t data)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	//SETBIT(PORTB, 1);		// RS = 1	data
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4831      	ldr	r0, [pc, #196]	; (80004b0 <lcd_write_data+0xd8>)
 80003ea:	f001 f83a 	bl	8001462 <HAL_GPIO_WritePin>

	//PORTA &= 0X0F;			// clear data-pins
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2110      	movs	r1, #16
 80003f2:	4830      	ldr	r0, [pc, #192]	; (80004b4 <lcd_write_data+0xdc>)
 80003f4:	f001 f835 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	482d      	ldr	r0, [pc, #180]	; (80004b4 <lcd_write_data+0xdc>)
 80003fe:	f001 f830 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2140      	movs	r1, #64	; 0x40
 8000406:	482b      	ldr	r0, [pc, #172]	; (80004b4 <lcd_write_data+0xdc>)
 8000408:	f001 f82b 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	4828      	ldr	r0, [pc, #160]	; (80004b4 <lcd_write_data+0xdc>)
 8000412:	f001 f826 	bl	8001462 <HAL_GPIO_WritePin>

	//PORTA |= (data & 0XF0);	// write MSBs only
	GPIO_TypeDef *GPIOx;
	GPIOx = GPIOB;
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <lcd_write_data+0xdc>)
 8000418:	60fb      	str	r3, [r7, #12]
	GPIOx->ODR |= (data & 0XF0);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	68da      	ldr	r2, [r3, #12]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000424:	431a      	orrs	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60da      	str	r2, [r3, #12]
	// Enable
	/*SETBIT(PORTB, 3);
	_delay_ms(1);
	CLRBIT(PORTB, 3);
	_delay_ms(1);*/
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000430:	481f      	ldr	r0, [pc, #124]	; (80004b0 <lcd_write_data+0xd8>)
 8000432:	f001 f816 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f000 fd72 	bl	8000f20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	481b      	ldr	r0, [pc, #108]	; (80004b0 <lcd_write_data+0xd8>)
 8000444:	f001 f80d 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fd69 	bl	8000f20 <HAL_Delay>

	/*PORTA &= 0X0F;			// clear data-pins
	PORTA |= (data << 4);	// write LSBs only*/
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	4818      	ldr	r0, [pc, #96]	; (80004b4 <lcd_write_data+0xdc>)
 8000454:	f001 f805 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2120      	movs	r1, #32
 800045c:	4815      	ldr	r0, [pc, #84]	; (80004b4 <lcd_write_data+0xdc>)
 800045e:	f001 f800 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2140      	movs	r1, #64	; 0x40
 8000466:	4813      	ldr	r0, [pc, #76]	; (80004b4 <lcd_write_data+0xdc>)
 8000468:	f000 fffb 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4810      	ldr	r0, [pc, #64]	; (80004b4 <lcd_write_data+0xdc>)
 8000472:	f000 fff6 	bl	8001462 <HAL_GPIO_WritePin>

	GPIOx->ODR |= (data << 4);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	79fa      	ldrb	r2, [r7, #7]
 800047c:	0112      	lsls	r2, r2, #4
 800047e:	431a      	orrs	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	60da      	str	r2, [r3, #12]
	// Enable
	/*SETBIT(PORTB, 3);
	_delay_ms(1);
	CLRBIT(PORTB, 3);
	_delay_ms(1);*/
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048a:	4809      	ldr	r0, [pc, #36]	; (80004b0 <lcd_write_data+0xd8>)
 800048c:	f000 ffe9 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000490:	2001      	movs	r0, #1
 8000492:	f000 fd45 	bl	8000f20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <lcd_write_data+0xd8>)
 800049e:	f000 ffe0 	bl	8001462 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fd3c 	bl	8000f20 <HAL_Delay>
}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010800 	.word	0x40010800
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <lcd_write_string>:

void lcd_write_string(uint8_t *string)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
	while (*(string + i) != '\0')
 80004c4:	e009      	b.n	80004da <lcd_write_string+0x22>
	{
		lcd_write_data(*(string + i));
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff82 	bl	80003d8 <lcd_write_data>
		i++;
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	3301      	adds	r3, #1
 80004d8:	73fb      	strb	r3, [r7, #15]
	while (*(string + i) != '\0')
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1ef      	bne.n	80004c6 <lcd_write_string+0xe>
	}
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <lcd_write_number>:

void lcd_write_number(uint16_t number)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	uint8_t l = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]
	uint16_t temp = number;
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	81bb      	strh	r3, [r7, #12]
	do
	{
		l++;
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	3301      	adds	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
		temp /= 10;
 8000508:	89bb      	ldrh	r3, [r7, #12]
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <lcd_write_number+0xac>)
 800050c:	fba2 2303 	umull	r2, r3, r2, r3
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	81bb      	strh	r3, [r7, #12]
	}
	while (temp != 0);
 8000514:	89bb      	ldrh	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f3      	bne.n	8000502 <lcd_write_number+0x12>
	// temp = 0 now
	while (number != 0)
 800051a:	e019      	b.n	8000550 <lcd_write_number+0x60>
	{
		temp *= 10;
 800051c:	89bb      	ldrh	r3, [r7, #12]
 800051e:	461a      	mov	r2, r3
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	4413      	add	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	81bb      	strh	r3, [r7, #12]
		temp += number % 10;
 8000528:	88fa      	ldrh	r2, [r7, #6]
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <lcd_write_number+0xac>)
 800052c:	fba3 1302 	umull	r1, r3, r3, r2
 8000530:	08d9      	lsrs	r1, r3, #3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	b29a      	uxth	r2, r3
 800053e:	89bb      	ldrh	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	81bb      	strh	r3, [r7, #12]
		number /= 10;
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <lcd_write_number+0xac>)
 8000548:	fba2 2303 	umull	r2, r3, r2, r3
 800054c:	08db      	lsrs	r3, r3, #3
 800054e:	80fb      	strh	r3, [r7, #6]
	while (number != 0)
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1e2      	bne.n	800051c <lcd_write_number+0x2c>
	}
	while (l != 0)
 8000556:	e019      	b.n	800058c <lcd_write_number+0x9c>
	{
		lcd_write_data((temp % 10) + 48);
 8000558:	89ba      	ldrh	r2, [r7, #12]
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <lcd_write_number+0xac>)
 800055c:	fba3 1302 	umull	r1, r3, r3, r2
 8000560:	08d9      	lsrs	r1, r3, #3
 8000562:	460b      	mov	r3, r1
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	440b      	add	r3, r1
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	3330      	adds	r3, #48	; 0x30
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff2f 	bl	80003d8 <lcd_write_data>
		temp /= 10;
 800057a:	89bb      	ldrh	r3, [r7, #12]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <lcd_write_number+0xac>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	08db      	lsrs	r3, r3, #3
 8000584:	81bb      	strh	r3, [r7, #12]
		l--;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	3b01      	subs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
	while (l != 0)
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e2      	bne.n	8000558 <lcd_write_number+0x68>
	}
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	cccccccd 	.word	0xcccccccd

080005a0 <delay>:
uint8_t arr[4]={0,0,0,0},i=0;
uint8_t flag=0;
uint8_t seconds = 0;
uint8_t minutes = 0;
void delay(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(flag==0){
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <delay+0x34>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10f      	bne.n	80005cc <delay+0x2c>
		TIM2->CR1 |= (1 << 0);
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
		flag=1;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <delay+0x34>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
		while(flag==1);
 80005c2:	bf00      	nop
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <delay+0x34>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d0fb      	beq.n	80005c4 <delay+0x24>
	}
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000031 	.word	0x20000031

080005d8 <beeb>:
void beeb(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <beeb+0x28>)
 80005e4:	f000 ff3d 	bl	8001462 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f000 fc99 	bl	8000f20 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <beeb+0x28>)
 80005f6:	f000 ff34 	bl	8001462 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40011000 	.word	0x40011000

08000604 <ready>:
void ready(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    beeb();
 8000608:	f7ff ffe6 	bl	80005d8 <beeb>
    HAL_Delay(25);
 800060c:	2019      	movs	r0, #25
 800060e:	f000 fc87 	bl	8000f20 <HAL_Delay>
    beeb();
 8000612:	f7ff ffe1 	bl	80005d8 <beeb>
    HAL_Delay(25);
 8000616:	2019      	movs	r0, #25
 8000618:	f000 fc82 	bl	8000f20 <HAL_Delay>
    beeb();
 800061c:	f7ff ffdc 	bl	80005d8 <beeb>
    lcd_cmd(0x01);
 8000620:	2001      	movs	r0, #1
 8000622:	f7ff fe69 	bl	80002f8 <lcd_cmd>
    reset();
 8000626:	f000 f82f 	bl	8000688 <reset>
    while(1){
        lcd_cmd(0x80);
 800062a:	2080      	movs	r0, #128	; 0x80
 800062c:	f7ff fe64 	bl	80002f8 <lcd_cmd>
        lcd_write_string("Ready!");
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <ready+0x48>)
 8000632:	f7ff ff41 	bl	80004b8 <lcd_write_string>
        if(keypad_scan()){
 8000636:	f7ff fd89 	bl	800014c <keypad_scan>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f4      	beq.n	800062a <ready+0x26>
            beeb();
 8000640:	f7ff ffca 	bl	80005d8 <beeb>
            break;
 8000644:	bf00      	nop
        }

    }
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080024b4 	.word	0x080024b4

08000650 <stop>:
uint8_t stop(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    while(1){
        if(keypad_scan()=='o'){
 8000654:	f7ff fd7a 	bl	800014c <keypad_scan>
 8000658:	4603      	mov	r3, r0
 800065a:	2b6f      	cmp	r3, #111	; 0x6f
 800065c:	d10a      	bne.n	8000674 <stop+0x24>
            beeb();
 800065e:	f7ff ffbb 	bl	80005d8 <beeb>
            HAL_Delay(5);
 8000662:	2005      	movs	r0, #5
 8000664:	f000 fc5c 	bl	8000f20 <HAL_Delay>
            beeb();
 8000668:	f7ff ffb6 	bl	80005d8 <beeb>
            reset();
 800066c:	f000 f80c 	bl	8000688 <reset>
            return 1;
 8000670:	2301      	movs	r3, #1
 8000672:	e007      	b.n	8000684 <stop+0x34>
        } else if(keypad_scan()=='/'){
 8000674:	f7ff fd6a 	bl	800014c <keypad_scan>
 8000678:	4603      	mov	r3, r0
 800067a:	2b2f      	cmp	r3, #47	; 0x2f
 800067c:	d1ea      	bne.n	8000654 <stop+0x4>
            beeb();
 800067e:	f7ff ffab 	bl	80005d8 <beeb>
            return 0;
 8000682:	2300      	movs	r3, #0
        }
    }
}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}

08000688 <reset>:
void reset(){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
    uint8_t j;
    i=0;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <reset+0x30>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
    for(j=0;j<4;j++)
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	e006      	b.n	80006a8 <reset+0x20>
        arr[j]=0;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <reset+0x34>)
 800069e:	2100      	movs	r1, #0
 80006a0:	54d1      	strb	r1, [r2, r3]
    for(j=0;j<4;j++)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9f5      	bls.n	800069a <reset+0x12>
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000030 	.word	0x20000030
 80006bc:	2000002c 	.word	0x2000002c

080006c0 <start>:
uint8_t start(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	seconds = (arr[2]*10) + arr[3];
 80006c4:	4b45      	ldr	r3, [pc, #276]	; (80007dc <start+0x11c>)
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	461a      	mov	r2, r3
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b42      	ldr	r3, [pc, #264]	; (80007dc <start+0x11c>)
 80006d4:	78db      	ldrb	r3, [r3, #3]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <start+0x120>)
 80006dc:	701a      	strb	r2, [r3, #0]
	minutes = (arr[0]*10) + arr[1];
 80006de:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <start+0x11c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <start+0x11c>)
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	4413      	add	r3, r2
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <start+0x124>)
 80006f6:	701a      	strb	r2, [r3, #0]
    lcd_cmd(0x01);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff fdfd 	bl	80002f8 <lcd_cmd>
    lcd_cmd(0x80);
 80006fe:	2080      	movs	r0, #128	; 0x80
 8000700:	f7ff fdfa 	bl	80002f8 <lcd_cmd>
    lcd_write_string("START");
 8000704:	4838      	ldr	r0, [pc, #224]	; (80007e8 <start+0x128>)
 8000706:	f7ff fed7 	bl	80004b8 <lcd_write_string>
    lcd_cmd(0x86);
 800070a:	2086      	movs	r0, #134	; 0x86
 800070c:	f7ff fdf4 	bl	80002f8 <lcd_cmd>
    lcd_write_string("MM:SS");
 8000710:	4836      	ldr	r0, [pc, #216]	; (80007ec <start+0x12c>)
 8000712:	f7ff fed1 	bl	80004b8 <lcd_write_string>
    while(minutes>=0){
        while(seconds>0){
 8000716:	e040      	b.n	800079a <start+0xda>
            lcd_cmd(0xC6);
 8000718:	20c6      	movs	r0, #198	; 0xc6
 800071a:	f7ff fded 	bl	80002f8 <lcd_cmd>
            if(minutes<10)
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <start+0x124>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b09      	cmp	r3, #9
 8000724:	d802      	bhi.n	800072c <start+0x6c>
                lcd_write_number(0);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fee2 	bl	80004f0 <lcd_write_number>
            lcd_write_number(minutes);
 800072c:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <start+0x124>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fedc 	bl	80004f0 <lcd_write_number>
            lcd_write_data(':');
 8000738:	203a      	movs	r0, #58	; 0x3a
 800073a:	f7ff fe4d 	bl	80003d8 <lcd_write_data>
            if(seconds<10)
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <start+0x120>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b09      	cmp	r3, #9
 8000744:	d802      	bhi.n	800074c <start+0x8c>
                lcd_write_number(0);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fed2 	bl	80004f0 <lcd_write_number>
            lcd_write_number(seconds);
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <start+0x120>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fecc 	bl	80004f0 <lcd_write_number>
            delay();
 8000758:	f7ff ff22 	bl	80005a0 <delay>
            seconds--;
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <start+0x120>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <start+0x120>)
 8000766:	701a      	strb	r2, [r3, #0]
            if(keypad_scan()=='*'){
 8000768:	f7ff fcf0 	bl	800014c <keypad_scan>
 800076c:	4603      	mov	r3, r0
 800076e:	2b2a      	cmp	r3, #42	; 0x2a
 8000770:	d108      	bne.n	8000784 <start+0xc4>
                beeb();
 8000772:	f7ff ff31 	bl	80005d8 <beeb>
                if(stop())
 8000776:	f7ff ff6b 	bl	8000650 <stop>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <start+0xda>
                    return 1;
 8000780:	2301      	movs	r3, #1
 8000782:	e028      	b.n	80007d6 <start+0x116>
                else
                    continue;
            }else if(keypad_scan()=='o'){
 8000784:	f7ff fce2 	bl	800014c <keypad_scan>
 8000788:	4603      	mov	r3, r0
 800078a:	2b6f      	cmp	r3, #111	; 0x6f
 800078c:	d105      	bne.n	800079a <start+0xda>
            	beeb();
 800078e:	f7ff ff23 	bl	80005d8 <beeb>
            	reset();
 8000792:	f7ff ff79 	bl	8000688 <reset>
            	return 1;
 8000796:	2301      	movs	r3, #1
 8000798:	e01d      	b.n	80007d6 <start+0x116>
        while(seconds>0){
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <start+0x120>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1ba      	bne.n	8000718 <start+0x58>
            }
        }
        if(minutes>0){
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <start+0x124>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d008      	beq.n	80007bc <start+0xfc>
        	minutes--;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <start+0x124>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <start+0x124>)
 80007b4:	701a      	strb	r2, [r3, #0]
			seconds=59;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <start+0x120>)
 80007b8:	223b      	movs	r2, #59	; 0x3b
 80007ba:	701a      	strb	r2, [r3, #0]
        }
        if(minutes == 0 && seconds==0)
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <start+0x124>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1ea      	bne.n	800079a <start+0xda>
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <start+0x120>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d000      	beq.n	80007ce <start+0x10e>
        while(seconds>0){
 80007cc:	e7e5      	b.n	800079a <start+0xda>
        	break;
 80007ce:	bf00      	nop

    }

    ready();
 80007d0:	f7ff ff18 	bl	8000604 <ready>
    return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000002c 	.word	0x2000002c
 80007e0:	20000032 	.word	0x20000032
 80007e4:	20000033 	.word	0x20000033
 80007e8:	080024bc 	.word	0x080024bc
 80007ec:	080024c4 	.word	0x080024c4

080007f0 <home>:
void home(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    lcd_cmd(0x80);
 80007f4:	2080      	movs	r0, #128	; 0x80
 80007f6:	f7ff fd7f 	bl	80002f8 <lcd_cmd>
    lcd_write_string("* Press *");
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <home+0x20>)
 80007fc:	f7ff fe5c 	bl	80004b8 <lcd_write_string>
    lcd_cmd(0xc0);
 8000800:	20c0      	movs	r0, #192	; 0xc0
 8000802:	f7ff fd79 	bl	80002f8 <lcd_cmd>
    lcd_write_string("Micro or Grill");
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <home+0x24>)
 8000808:	f7ff fe56 	bl	80004b8 <lcd_write_string>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	080024cc 	.word	0x080024cc
 8000814:	080024d8 	.word	0x080024d8

08000818 <micro_time>:
void micro_time(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
    uint8_t data;
    lcd_cmd(0x01);
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff fd6a 	bl	80002f8 <lcd_cmd>
        while(1){
            lcd_cmd(0x80);
 8000824:	2080      	movs	r0, #128	; 0x80
 8000826:	f7ff fd67 	bl	80002f8 <lcd_cmd>
            lcd_write_string("MICRO");
 800082a:	4834      	ldr	r0, [pc, #208]	; (80008fc <micro_time+0xe4>)
 800082c:	f7ff fe44 	bl	80004b8 <lcd_write_string>
            lcd_cmd(0x86);
 8000830:	2086      	movs	r0, #134	; 0x86
 8000832:	f7ff fd61 	bl	80002f8 <lcd_cmd>
            lcd_write_string("MM:SS");
 8000836:	4832      	ldr	r0, [pc, #200]	; (8000900 <micro_time+0xe8>)
 8000838:	f7ff fe3e 	bl	80004b8 <lcd_write_string>
            lcd_cmd(0xC6);
 800083c:	20c6      	movs	r0, #198	; 0xc6
 800083e:	f7ff fd5b 	bl	80002f8 <lcd_cmd>
            lcd_write_number(arr[0]);
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <micro_time+0xec>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe51 	bl	80004f0 <lcd_write_number>
            lcd_write_number(arr[1]);
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <micro_time+0xec>)
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe4b 	bl	80004f0 <lcd_write_number>
            lcd_write_data(':');
 800085a:	203a      	movs	r0, #58	; 0x3a
 800085c:	f7ff fdbc 	bl	80003d8 <lcd_write_data>
            lcd_write_number(arr[2]);
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <micro_time+0xec>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe42 	bl	80004f0 <lcd_write_number>
            lcd_write_number(arr[3]);
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <micro_time+0xec>)
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	b29b      	uxth	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe3c 	bl	80004f0 <lcd_write_number>
            if((data = keypad_scan()) && i<4 && data>=48 && data<=57){
 8000878:	f7ff fc68 	bl	800014c <keypad_scan>
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01c      	beq.n	80008c0 <micro_time+0xa8>
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <micro_time+0xf0>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d818      	bhi.n	80008c0 <micro_time+0xa8>
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b2f      	cmp	r3, #47	; 0x2f
 8000892:	d915      	bls.n	80008c0 <micro_time+0xa8>
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b39      	cmp	r3, #57	; 0x39
 8000898:	d812      	bhi.n	80008c0 <micro_time+0xa8>
                HAL_Delay(200);
 800089a:	20c8      	movs	r0, #200	; 0xc8
 800089c:	f000 fb40 	bl	8000f20 <HAL_Delay>
                arr[i]=data-48;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <micro_time+0xf0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3b30      	subs	r3, #48	; 0x30
 80008aa:	b2d9      	uxtb	r1, r3
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <micro_time+0xec>)
 80008ae:	5499      	strb	r1, [r3, r2]
                beeb();
 80008b0:	f7ff fe92 	bl	80005d8 <beeb>
                i++;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <micro_time+0xf0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <micro_time+0xf0>)
 80008be:	701a      	strb	r2, [r3, #0]
            }
            if(keypad_scan() == '*'){
 80008c0:	f7ff fc44 	bl	800014c <keypad_scan>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b2a      	cmp	r3, #42	; 0x2a
 80008c8:	d105      	bne.n	80008d6 <micro_time+0xbe>
                beeb();
 80008ca:	f7ff fe85 	bl	80005d8 <beeb>
                lcd_cmd(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fd12 	bl	80002f8 <lcd_cmd>
                break;
 80008d4:	e00d      	b.n	80008f2 <micro_time+0xda>
            } else if(keypad_scan() == '/'){
 80008d6:	f7ff fc39 	bl	800014c <keypad_scan>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b2f      	cmp	r3, #47	; 0x2f
 80008de:	d1a1      	bne.n	8000824 <micro_time+0xc>
                beeb();
 80008e0:	f7ff fe7a 	bl	80005d8 <beeb>
                if(start()==0){
 80008e4:	f7ff feec 	bl	80006c0 <start>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d000      	beq.n	80008f0 <micro_time+0xd8>
            lcd_cmd(0x80);
 80008ee:	e799      	b.n	8000824 <micro_time+0xc>
                    break;
 80008f0:	bf00      	nop
                }
            }
        }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	080024e8 	.word	0x080024e8
 8000900:	080024c4 	.word	0x080024c4
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000030 	.word	0x20000030

0800090c <grill_time>:
void grill_time(){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
uint8_t data;
    lcd_cmd(0x01);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff fcf0 	bl	80002f8 <lcd_cmd>
        while(1){
            lcd_cmd(0x80);
 8000918:	2080      	movs	r0, #128	; 0x80
 800091a:	f7ff fced 	bl	80002f8 <lcd_cmd>
            lcd_write_string("GRILL");
 800091e:	4834      	ldr	r0, [pc, #208]	; (80009f0 <grill_time+0xe4>)
 8000920:	f7ff fdca 	bl	80004b8 <lcd_write_string>
            lcd_cmd(0x86);
 8000924:	2086      	movs	r0, #134	; 0x86
 8000926:	f7ff fce7 	bl	80002f8 <lcd_cmd>
            lcd_write_string("MM:SS");
 800092a:	4832      	ldr	r0, [pc, #200]	; (80009f4 <grill_time+0xe8>)
 800092c:	f7ff fdc4 	bl	80004b8 <lcd_write_string>
            lcd_cmd(0xC6);
 8000930:	20c6      	movs	r0, #198	; 0xc6
 8000932:	f7ff fce1 	bl	80002f8 <lcd_cmd>
            lcd_write_number(arr[0]);
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <grill_time+0xec>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdd7 	bl	80004f0 <lcd_write_number>
            lcd_write_number(arr[1]);
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <grill_time+0xec>)
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	b29b      	uxth	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdd1 	bl	80004f0 <lcd_write_number>
            lcd_write_data(':');
 800094e:	203a      	movs	r0, #58	; 0x3a
 8000950:	f7ff fd42 	bl	80003d8 <lcd_write_data>
            lcd_write_number(arr[2]);
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <grill_time+0xec>)
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fdc8 	bl	80004f0 <lcd_write_number>
            lcd_write_number(arr[3]);
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <grill_time+0xec>)
 8000962:	78db      	ldrb	r3, [r3, #3]
 8000964:	b29b      	uxth	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fdc2 	bl	80004f0 <lcd_write_number>
            if((data = keypad_scan()) && i<4 && data>=48 && data<=57){
 800096c:	f7ff fbee 	bl	800014c <keypad_scan>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d01c      	beq.n	80009b4 <grill_time+0xa8>
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <grill_time+0xf0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d818      	bhi.n	80009b4 <grill_time+0xa8>
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b2f      	cmp	r3, #47	; 0x2f
 8000986:	d915      	bls.n	80009b4 <grill_time+0xa8>
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b39      	cmp	r3, #57	; 0x39
 800098c:	d812      	bhi.n	80009b4 <grill_time+0xa8>
            	HAL_Delay(200);
 800098e:	20c8      	movs	r0, #200	; 0xc8
 8000990:	f000 fac6 	bl	8000f20 <HAL_Delay>
                arr[i]=data-48;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <grill_time+0xf0>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	3b30      	subs	r3, #48	; 0x30
 800099e:	b2d9      	uxtb	r1, r3
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <grill_time+0xec>)
 80009a2:	5499      	strb	r1, [r3, r2]
                beeb();
 80009a4:	f7ff fe18 	bl	80005d8 <beeb>
                i++;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <grill_time+0xf0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <grill_time+0xf0>)
 80009b2:	701a      	strb	r2, [r3, #0]
            }
            if(keypad_scan() == '*'){
 80009b4:	f7ff fbca 	bl	800014c <keypad_scan>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b2a      	cmp	r3, #42	; 0x2a
 80009bc:	d105      	bne.n	80009ca <grill_time+0xbe>
                beeb();
 80009be:	f7ff fe0b 	bl	80005d8 <beeb>
                lcd_cmd(0x01);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fc98 	bl	80002f8 <lcd_cmd>
                break;
 80009c8:	e00d      	b.n	80009e6 <grill_time+0xda>
            } else if(keypad_scan() == '/'){
 80009ca:	f7ff fbbf 	bl	800014c <keypad_scan>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b2f      	cmp	r3, #47	; 0x2f
 80009d2:	d1a1      	bne.n	8000918 <grill_time+0xc>
                beeb();
 80009d4:	f7ff fe00 	bl	80005d8 <beeb>
                if(start()==0){
 80009d8:	f7ff fe72 	bl	80006c0 <start>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d000      	beq.n	80009e4 <grill_time+0xd8>
            lcd_cmd(0x80);
 80009e2:	e799      	b.n	8000918 <grill_time+0xc>
                    break;
 80009e4:	bf00      	nop
                }
            }
        }
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	080024f0 	.word	0x080024f0
 80009f4:	080024c4 	.word	0x080024c4
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	20000030 	.word	0x20000030

08000a00 <main>:
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fa29 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f831 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f8dd 	bl	8000bcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a12:	f000 f877 	bl	8000b04 <MX_TIM2_Init>

  TIM2->CR1 |= (1 << 3);
 8000a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6013      	str	r3, [r2, #0]
  TIM2->CR1 &= (0 << 0);
 8000a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	 lcd_init();
 8000a34:	f7ff fc3e 	bl	80002b4 <lcd_init>
  	 uint8_t data;

  	 while(1) {
  		 home();
 8000a38:	f7ff feda 	bl	80007f0 <home>
  		 data = keypad_scan();
 8000a3c:	f7ff fb86 	bl	800014c <keypad_scan>
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
  		 if(data == '+'){
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b2b      	cmp	r3, #43	; 0x2b
 8000a48:	d104      	bne.n	8000a54 <main+0x54>
  			 beeb();
 8000a4a:	f7ff fdc5 	bl	80005d8 <beeb>
  			 micro_time();
 8000a4e:	f7ff fee3 	bl	8000818 <micro_time>
 8000a52:	e7f1      	b.n	8000a38 <main+0x38>
  		 } else if(data == '-'){
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b2d      	cmp	r3, #45	; 0x2d
 8000a58:	d104      	bne.n	8000a64 <main+0x64>
  			 beeb();
 8000a5a:	f7ff fdbd 	bl	80005d8 <beeb>
  			 grill_time();
 8000a5e:	f7ff ff55 	bl	800090c <grill_time>
 8000a62:	e7e9      	b.n	8000a38 <main+0x38>
  		 } else if(data == '*'){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b2a      	cmp	r3, #42	; 0x2a
 8000a68:	d1e6      	bne.n	8000a38 <main+0x38>
  			 home();
 8000a6a:	f7ff fec1 	bl	80007f0 <home>
  		 home();
 8000a6e:	e7e3      	b.n	8000a38 <main+0x38>

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fd04 	bl	800248c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fcf4 	bl	8001494 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ab2:	f000 f91b 	bl	8000cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 ff60 	bl	8001994 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f907 	bl	8000cec <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3740      	adds	r7, #64	; 0x40
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

	//if(minutes>=0){

		flag=0;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
	//}

}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000031 	.word	0x20000031

08000b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM2_Init+0xb8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <MX_TIM2_Init+0xbc>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0b5b      	lsrs	r3, r3, #13
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <MX_TIM2_Init+0xc0>)
 8000b30:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_TIM2_Init+0xc0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b40:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b5e:	f001 f883 	bl	8001c68 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b68:	f000 f8c0 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b7a:	f001 fa1f 	bl	8001fbc <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b84:	f000 f8b2 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000b96:	f001 fbe5 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ba0:	f000 f8a4 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_TIM2_Init+0xc4>)
 8000ba6:	f001 f8af 	bl	8001d08 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0xb0>
  {
  		  /* Starting Error */
  		  Error_Handler();
 8000bb0:	f000 f89c 	bl	8000cec <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	d1b71759 	.word	0xd1b71759
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	20000034 	.word	0x20000034

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a3d      	ldr	r2, [pc, #244]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_GPIO_Init+0x110>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	4826      	ldr	r0, [pc, #152]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c48:	f000 fc0b 	bl	8001462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f240 710f 	movw	r1, #1807	; 0x70f
 8000c52:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <MX_GPIO_Init+0x118>)
 8000c54:	f000 fc05 	bl	8001462 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	21f0      	movs	r1, #240	; 0xf0
 8000c5c:	4822      	ldr	r0, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000c5e:	f000 fc00 	bl	8001462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0x114>)
 8000c7c:	f000 fa80 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c80:	f240 730f 	movw	r3, #1807	; 0x70f
 8000c84:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_GPIO_Init+0x118>)
 8000c9a:	f000 fa71 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	23f0      	movs	r3, #240	; 0xf0
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_GPIO_Init+0x118>)
 8000cb2:	f000 fa65 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	23f0      	movs	r3, #240	; 0xf0
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_GPIO_Init+0x11c>)
 8000cce:	f000 fa57 	bl	8001180 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <Error_Handler+0x6>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_MspInit+0x60>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_MspInit+0x60>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d68:	d113      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_TIM_Base_MspInit+0x44>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_TIM_Base_MspInit+0x44>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	201c      	movs	r0, #28
 8000d88:	f000 f9c3 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8c:	201c      	movs	r0, #28
 8000d8e:	f000 f9dc 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f87f 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f000 ffd9 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000034 	.word	0x20000034

08000e04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e12:	e003      	b.n	8000e1c <LoopCopyDataInit>

08000e14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e1a:	3104      	adds	r1, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e24:	d3f6      	bcc.n	8000e14 <CopyDataInit>
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e28:	e002      	b.n	8000e30 <LoopFillZerobss>

08000e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e2c:	f842 3b04 	str.w	r3, [r2], #4

08000e30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e34:	d3f9      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e36:	f7ff ffe5 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f001 fb03 	bl	8002444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3e:	f7ff fddf 	bl	8000a00 <main>
  bx lr
 8000e42:	4770      	bx	lr
  ldr r3, =_sidata
 8000e44:	08002534 	.word	0x08002534
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e54:	20000080 	.word	0x20000080

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x28>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x28>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f945 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff ff3c 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f95d 	bl	8001166 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	f000 f925 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x20>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_IncTick+0x20>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000008 	.word	0x20000008
 8000f08:	2000007c 	.word	0x2000007c

08000f0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <HAL_GetTick+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	2000007c 	.word	0x2000007c

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fff0 	bl	8000f0c <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_Delay+0x40>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffe0 	bl	8000f0c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <__NVIC_EnableIRQ+0x34>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2d 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff42 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff35 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e127      	b.n	80013e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8116 	bne.w	80013de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d034      	beq.n	8001224 <HAL_GPIO_Init+0xa4>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d80d      	bhi.n	80011da <HAL_GPIO_Init+0x5a>
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x9a>
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d804      	bhi.n	80011d0 <HAL_GPIO_Init+0x50>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01c      	beq.n	8001208 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e048      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d043      	beq.n	800125c <HAL_GPIO_Init+0xdc>
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d01b      	beq.n	8001210 <HAL_GPIO_Init+0x90>
          break;
 80011d8:	e043      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d026      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011e0:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d806      	bhi.n	80011f4 <HAL_GPIO_Init+0x74>
 80011e6:	4a87      	ldr	r2, [pc, #540]	; (8001404 <HAL_GPIO_Init+0x284>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d020      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ec:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_GPIO_Init+0x288>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01d      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e036      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f4:	4a85      	ldr	r2, [pc, #532]	; (800140c <HAL_GPIO_Init+0x28c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011fa:	4a85      	ldr	r2, [pc, #532]	; (8001410 <HAL_GPIO_Init+0x290>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d016      	beq.n	800122e <HAL_GPIO_Init+0xae>
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <HAL_GPIO_Init+0x294>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e028      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e023      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01e      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e019      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e012      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d801      	bhi.n	800126c <HAL_GPIO_Init+0xec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e001      	b.n	8001270 <HAL_GPIO_Init+0xf0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d802      	bhi.n	800127e <HAL_GPIO_Init+0xfe>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x104>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	3b08      	subs	r3, #8
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	210f      	movs	r1, #15
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8096 	beq.w	80013de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b56      	ldr	r3, [pc, #344]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ca:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_GPIO_Init+0x29c>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x19e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x19a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x196>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2ac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x192>
 800130e:	2303      	movs	r3, #3
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001312:	2304      	movs	r3, #4
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1a0>
 800131e:	2300      	movs	r3, #0
 8001320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001330:	493a      	ldr	r1, [pc, #232]	; (800141c <HAL_GPIO_Init+0x29c>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4938      	ldr	r1, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4933      	ldr	r1, [pc, #204]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	492e      	ldr	r1, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4929      	ldr	r1, [pc, #164]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800138a:	4013      	ands	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4924      	ldr	r1, [pc, #144]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	491f      	ldr	r1, [pc, #124]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	491a      	ldr	r1, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4915      	ldr	r1, [pc, #84]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f aed0 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	372c      	adds	r7, #44	; 0x2c
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	10210000 	.word	0x10210000
 8001404:	10110000 	.word	0x10110000
 8001408:	10120000 	.word	0x10120000
 800140c:	10310000 	.word	0x10310000
 8001410:	10320000 	.word	0x10320000
 8001414:	10220000 	.word	0x10220000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001472:	787b      	ldrb	r3, [r7, #1]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147e:	e003      	b.n	8001488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	611a      	str	r2, [r3, #16]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e26c      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8087 	beq.w	80015c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00c      	beq.n	80014da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c0:	4b8f      	ldr	r3, [pc, #572]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d112      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
 80014cc:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d10b      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014da:	4b89      	ldr	r3, [pc, #548]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x12c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d168      	bne.n	80015c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e246      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x76>
 80014fc:	4b80      	ldr	r3, [pc, #512]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7f      	ldr	r2, [pc, #508]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e02e      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b78      	ldr	r3, [pc, #480]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a77      	ldr	r2, [pc, #476]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0xbc>
 8001536:	4b72      	ldr	r3, [pc, #456]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a71      	ldr	r2, [pc, #452]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xd4>
 8001550:	4b6b      	ldr	r3, [pc, #428]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6a      	ldr	r2, [pc, #424]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b68      	ldr	r3, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a67      	ldr	r2, [pc, #412]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fccc 	bl	8000f0c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fcc8 	bl	8000f0c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1fa      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xe4>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fcb8 	bl	8000f0c <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcb4 	bl	8000f0c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1e6      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x10c>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
 80015e6:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b43      	ldr	r3, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1ba      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4939      	ldr	r1, [pc, #228]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fc6d 	bl	8000f0c <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fc69 	bl	8000f0c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e19b      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4927      	ldr	r1, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x270>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc4c 	bl	8000f0c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc48 	bl	8000f0c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e17a      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03a      	beq.n	8001718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fc2c 	bl	8000f0c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fc28 	bl	8000f0c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e15a      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 faa8 	bl	8001c2c <RCC_Delay>
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_OscConfig+0x274>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fc12 	bl	8000f0c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc0e 	bl	8000f0c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d908      	bls.n	800170c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e140      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	42420000 	.word	0x42420000
 8001708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e9      	bne.n	80016ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a6 	beq.w	8001872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b97      	ldr	r3, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b94      	ldr	r3, [pc, #592]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a93      	ldr	r2, [pc, #588]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b8e      	ldr	r3, [pc, #568]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a8a      	ldr	r2, [pc, #552]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fbcf 	bl	8000f0c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fbcb 	bl	8000f0c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0fd      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x4f8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x312>
 8001798:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e02d      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x334>
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a75      	ldr	r2, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x356>
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a69      	ldr	r2, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x36e>
 80017ea:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a66      	ldr	r2, [pc, #408]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb7f 	bl	8000f0c <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fb7b 	bl	8000f0c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0ab      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b57      	ldr	r3, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x37e>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fb69 	bl	8000f0c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fb65 	bl	8000f0c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e095      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b48      	ldr	r3, [pc, #288]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8081 	beq.w	800197e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d061      	beq.n	800194c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d146      	bne.n	800191e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb39 	bl	8000f0c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb35 	bl	8000f0c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e067      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	492d      	ldr	r1, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a19      	ldr	r1, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	430b      	orrs	r3, r1
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb09 	bl	8000f0c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fb05 	bl	8000f0c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e037      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x46a>
 800191c:	e02f      	b.n	800197e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_RCC_OscConfig+0x4fc>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff faf2 	bl	8000f0c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff faee 	bl	8000f0c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e020      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x498>
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e013      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	42420060 	.word	0x42420060

08001994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4965      	ldr	r1, [pc, #404]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e073      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4936      	ldr	r1, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff fa42 	bl	8000f0c <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff fa3e 	bl	8000f0c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e053      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d210      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4601      	mov	r1, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	fa21 f303 	lsr.w	r3, r1, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f9a0 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	0800251c 	.word	0x0800251c
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b490      	push	{r4, r7}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b70:	1d3c      	adds	r4, r7, #4
 8001b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x46>
 8001ba6:	e02d      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001baa:	623b      	str	r3, [r7, #32]
      break;
 8001bac:	e02d      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bba:	4413      	add	r3, r2
 8001bbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c5b      	lsrs	r3, r3, #17
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bda:	4413      	add	r3, r2
 8001bdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001be0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be6:	fb02 f203 	mul.w	r2, r2, r3
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	623b      	str	r3, [r7, #32]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c06:	623b      	str	r3, [r7, #32]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc90      	pop	{r4, r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	080024f8 	.word	0x080024f8
 8001c1c:	08002508 	.word	0x08002508
 8001c20:	40021000 	.word	0x40021000
 8001c24:	007a1200 	.word	0x007a1200
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <RCC_Delay+0x34>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <RCC_Delay+0x38>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0a5b      	lsrs	r3, r3, #9
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c48:	bf00      	nop
  }
  while (Delay --);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1e5a      	subs	r2, r3, #1
 8001c4e:	60fa      	str	r2, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <RCC_Delay+0x1c>
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e041      	b.n	8001cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f862 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 fa64 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e03a      	b.n	8001d96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0x98>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x58>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d009      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x58>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x58>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d010      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0202 	mvn.w	r2, #2
 8001dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f9a4 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f997 	bl	800212a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f9a6 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f97a 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f96d 	bl	800212a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f97c 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0208 	mvn.w	r2, #8
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f950 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f943 	bl	800212a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f952 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0210 	mvn.w	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f926 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f919 	bl	800212a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f928 	bl	800214e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0201 	mvn.w	r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fddc 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fa6b 	bl	8002432 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ec 	bl	8002160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0220 	mvn.w	r2, #32
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fa36 	bl	8002420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_ConfigClockSource+0x18>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0a6      	b.n	8002122 <HAL_TIM_ConfigClockSource+0x166>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d067      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0x120>
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d80b      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x6c>
 8002010:	2b10      	cmp	r3, #16
 8002012:	d073      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x140>
 8002014:	2b10      	cmp	r3, #16
 8002016:	d802      	bhi.n	800201e <HAL_TIM_ConfigClockSource+0x62>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d06f      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800201c:	e078      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800201e:	2b20      	cmp	r3, #32
 8002020:	d06c      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x140>
 8002022:	2b30      	cmp	r3, #48	; 0x30
 8002024:	d06a      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002026:	e073      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002028:	2b70      	cmp	r3, #112	; 0x70
 800202a:	d00d      	beq.n	8002048 <HAL_TIM_ConfigClockSource+0x8c>
 800202c:	2b70      	cmp	r3, #112	; 0x70
 800202e:	d804      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x7e>
 8002030:	2b50      	cmp	r3, #80	; 0x50
 8002032:	d033      	beq.n	800209c <HAL_TIM_ConfigClockSource+0xe0>
 8002034:	2b60      	cmp	r3, #96	; 0x60
 8002036:	d041      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002038:	e06a      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	d066      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x152>
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002044:	d017      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002046:	e063      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f000 f965 	bl	8002326 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800206a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]
      break;
 8002074:	e04c      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f000 f94e 	bl	8002326 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002098:	609a      	str	r2, [r3, #8]
      break;
 800209a:	e039      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f000 f8c5 	bl	8002238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2150      	movs	r1, #80	; 0x50
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f91c 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 80020ba:	e029      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f000 f8e3 	bl	8002294 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2160      	movs	r1, #96	; 0x60
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f90c 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 80020da:	e019      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f000 f8a5 	bl	8002238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f8fc 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 80020fa:	e009      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f000 f8f3 	bl	80022f2 <TIM_ITRx_SetConfig>
        break;
 800210c:	e000      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800210e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
	...

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0xb8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_Base_SetConfig+0xbc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x30>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_Base_SetConfig+0xc0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	; (800222c <TIM_Base_SetConfig+0xb8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <TIM_Base_SetConfig+0xbc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x62>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <TIM_Base_SetConfig+0xc0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <TIM_Base_SetConfig+0xb8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800

08002238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f023 030a 	bic.w	r3, r3, #10
 8002274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	621a      	str	r2, [r3, #32]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f023 0210 	bic.w	r2, r3, #16
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	031b      	lsls	r3, r3, #12
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	621a      	str	r2, [r3, #32]
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	f043 0307 	orr.w	r3, r3, #7
 8002314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002340:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002378:	2302      	movs	r3, #2
 800237a:	e046      	b.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d009      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10c      	bne.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800

08002420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	2500      	movs	r5, #0
 8002448:	4e0c      	ldr	r6, [pc, #48]	; (800247c <__libc_init_array+0x38>)
 800244a:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244c:	1ba4      	subs	r4, r4, r6
 800244e:	10a4      	asrs	r4, r4, #2
 8002450:	42a5      	cmp	r5, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	f000 f822 	bl	800249c <_init>
 8002458:	2500      	movs	r5, #0
 800245a:	4e0a      	ldr	r6, [pc, #40]	; (8002484 <__libc_init_array+0x40>)
 800245c:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <__libc_init_array+0x44>)
 800245e:	1ba4      	subs	r4, r4, r6
 8002460:	10a4      	asrs	r4, r4, #2
 8002462:	42a5      	cmp	r5, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800246c:	4798      	blx	r3
 800246e:	3501      	adds	r5, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002476:	4798      	blx	r3
 8002478:	3501      	adds	r5, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	0800252c 	.word	0x0800252c
 8002480:	0800252c 	.word	0x0800252c
 8002484:	0800252c 	.word	0x0800252c
 8002488:	08002530 	.word	0x08002530

0800248c <memset>:
 800248c:	4603      	mov	r3, r0
 800248e:	4402      	add	r2, r0
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	f803 1b01 	strb.w	r1, [r3], #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
